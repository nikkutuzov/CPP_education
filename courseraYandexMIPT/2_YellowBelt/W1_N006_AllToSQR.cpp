/*================================================================================*/
/*                    C++_Development_Basics: The_Yellow_Belt                     */
/*================================================================================*/
/*  Title: All to a square                                                        */
/*  Start_time: 20.07.2022 19:39                                                  */
/*  End_time:                                                                     */
/*  Note:                                                                         */
/*================================================================================*/

/*<===============================Problem_Statement==============================>*/

/*
 * Реализуйте шаблонную функцию Sqr, которая работает не только для чисел,но и для
 * контейнеров. Функция должна возвращать копию исходного контейнера, модифицировав
 * его следующим образом:
 *
 * - для vector элементы нужно возвести в квадрат;
 * - для map в квадрат нужно возвести только значения, но не ключи;
 * - для pair в квадрат нужно возвести каждый элемент пары.
 *
 * // Пример вызова функции
 * vector<int> v = {1, 2, 3};
 * cout << "vector:";
 * for (int x : Sqr(v)) {
 *   cout << ' ' << x;
 * }
 * cout << endl;
 *
 * map<int, pair<int, int>> map_of_pairs = {
 *   {4, {2, 2}},
 *   {7, {4, 3}}
 * };
 * cout << "map of pairs:" << endl;
 * for (const auto& x : Sqr(map_of_pairs)) {
 *   cout << x.first << ' ' << x.second.first << ' ' << x.second.second << endl;
 * }
 *
 * Код выше должен вывести:
 *
 * vector: 1 4 9
 * map of pairs:
 * 4 4 4
 * 7 16 9
 *
 * Функция должна корректно работать не только для контейнеров, состоящих
 * из чисел, но и для составных объектов, например, векторов словарей пар чисел.
 *
 * Для успешной сдачи решения необходимо сделать предварительное объявление
 * шаблонных функций перед всеми шаблонными функциями.
 *
 * Пример предварительного объявления шаблонной функци:
 *
 * // Предварительное объявление шаблонных функций
 * template<typename T> T FuncA(T x);
 * template<typename T> void FuncB(T x);
 *
 * // Объявляем шаблонные функции
 * template <typename T>
 * T FuncA(T x) { ... }
 *
 * template <typename T>
 * void FuncB(T x) { ... }
 *
 */

/*<=====================================CODE=====================================>*/

#include <iostream>
#include <vector>

/*<----------------------------declaration_of_funcs------------------------------>*/

// Предварительное объявление шаблонных функций
template<typename T> T FuncA(T x);
template<typename T> void FuncB(T x);

/*<-------------------------------------main------------------------------------->*/

int main() {
  std::vector<int> v = {1, 2, 3};
  std::cout << "vector:";

  for (int x : Sqr(v)) {
    std::cout << ' ' << x;
  }

  std::cout << std::endl;

  std::map<int, std::pair<int, int>> map_of_pairs = {
    {4, {2, 2}},
    {7, {4, 3}}
  };
  std::cout << "map of pairs:" << std::endl;

  for (const auto& x : Sqr(map_of_pairs)) {
    std::cout << x.first << ' ' << x.second.first
              << ' ' << x.second.second << std::endl;
  }

  return 0;
}

/*<-----------------------------definition_of_funcs------------------------------>*/

// Объявляем шаблонные функции
template <typename T>
T FuncA(T x) { /*...*/ }

template <typename T>
void FuncB(T x) { /*...*/ }
